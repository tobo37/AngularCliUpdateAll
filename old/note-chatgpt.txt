const fs = require('fs');
const { execSync } = require('child_process');

const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));

function gitAddCommit(packageName) {
  console.log(`git add / commit: ${packageName}`);
  execSync('git add .');
  execSync(`git commit -m "${packageName}"`);
}

function updateAngular() {
  console.log('next update @angular/cli @angular/core @angular/material');
  execSync('npx ng update @angular/cli @angular/core @angular/material');
  gitAddCommit('@angular/cli @angular/core @angular/material');
}

function updateDependencies() {
  packageJson.dependencies.forEach((line) => {
    const packageName = line.split(':')[0];
    console.log(`next update: ${packageName}`);
    execSync(`npx ng update ${packageName}`);
    gitAddCommit(`update: ${packageName}`);
  });
}

function updateDevDependencies() {
  packageJson.devDependencies.forEach((line) => {
    const packageName = line.split(':')[0];
    console.log(`next update: ${packageName}`);
    execSync(`npx ng update ${packageName}`);
    gitAddCommit(`update: ${packageName}`);
  });
}

function npmAuditFix() {
  console.log('run npm fix audit');
  execSync('npm audit fix');
  gitAddCommit('npm audit fix');
}

function updateAllSlow() {
  updateAngular();
  updateDependencies();
  updateDevDependencies();
  npmAuditFix();
}

updateAllSlow();

#### update cli ###
const [, , command] = process.argv;

if (command === 'updateAllSlow') {
  updateAllSlow();
} else if (command === 'npmAuditFix') {
  npmAuditFix();
} else {
  console.log('Invalid command. Available commands: updateAllSlow, npmAuditFix');
}

# aufruf mit node script.js npmAuditFix

umbau zu NPM:

Um dieses Programm als NPM-Modul exportieren zu können, müssen einige Schritte durchgeführt werden:

Erstellen Sie ein neues Verzeichnis für Ihr Projekt und wechseln Sie in dieses Verzeichnis.

Erstellen Sie eine package.json-Datei, indem Sie den Befehl npm init auf der Kommandozeile ausführen. Dieser Befehl führt Sie durch einige Schritte, bei denen Sie Informationen zu Ihrem Projekt eingeben müssen.

Erstellen Sie eine Datei namens index.js im Projektverzeichnis. Kopieren Sie den Code Ihres Programms in diese Datei.

Exportieren Sie die Funktionen, die Sie als API-Funktionen bereitstellen möchten, indem Sie die Schlüsselwort module.exports vor jede Funktion setzen. Beispielsweise:

Copy code
module.exports.updateAllSlow = updateAllSlow;
module.exports.npmAuditFix = npmAuditFix;
Fügen Sie Abhängigkeiten hinzu, die das Programm benötigt, um ausgeführt zu werden, indem Sie die Pakete über npm installieren.

Erstellen Sie einen Eintrag für die bin-Eigenschaft in der package.json, damit das Programm als CLI-Befehl verfügbar ist, indem Sie in package.json folgenden Eintrag hinzufügen

Copy code
"bin": {
    "yourCommandName": "index.js"
  },
Veröffentlichen Sie das Modul auf npm, indem Sie den Befehl npm publish auf der Kommandozeile ausführen.
Nachdem Sie diese Schritte ausgeführt haben, können andere Entwickler das Modul über npm installieren und die exportierten Funktionen in ihrem eigenen Code verwenden.
Als CLI-Befehl steht Ihr programm dann unter dem Namen yourCommandName zur Verfügung

Bitte beachten Sie, dass Sie vor veröffentlichen Ihres Moduls sicherstellen sollten, dass der Name des Moduls noch nicht von jemand anderem verwendet wird und es gut dokumentiert ist, damit es leicht von anderen Entwicklern verwendet werden kann.
